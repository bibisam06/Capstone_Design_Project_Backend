name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - filter
      - feature
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 소스 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # PEM 키 설정
      - name: Configure PEM Key
        env:
          PEM_KEY_BASE64: ${{ secrets.SSH_KEY }}
        run: |
          echo "$PEM_KEY_BASE64" | base64 --decode > dobee-web.pem
          chmod 400 dobee-web.pem

      #JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # 환경별 yml 파일 생성(2) - dev
      - name: make application.properties
        run: |
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.YML_DEV }}" > ./application-dev.yml
        shell: bash

      # Gradle 설정
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4.0.0

      # Gradle 실행 권한 부여 및 빌드
      - name: Grant Gradle Permission and Build
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      # Keystore 파일 디코딩 및 저장
      - name: Decode and Save Keystore File
        env:
          KEYSTORE_BASE64: ${{ secrets.EC2_KEY }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 --decode > keystore.p12

      # docker build & push to production
      - name: Docker build & push to prod
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/docker-test-prod .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-prod

     # docker build & push to develop
      - name: Docker build & push to hub
    run: |
      docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/latest .
      docker push ${{ secrets.DOCKER_USERNAME }}/latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # 서버로 배포
      - name: Deploy Application
        run: |
          ssh -i dobee-web.pem ubuntu@${{secrets.SERVER_IP}} << EOF
          docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
          docker stop dobee_backend || true
          docker rm dobee_backend || true
          docker run -i -t -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/backend:latest
          EOF
